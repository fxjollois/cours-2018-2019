# - `ordre`, `codact`, `libact`,
# - `adresse_complete`, `num`, `type_voie`, `libelle_voie`
# - `iris`, `ilot`, `quartier`, `arro`
# - longitude et latitude (`xy` - *attention* valeurs `NULL` présentes)
# - Si vous ne réussissez pas à créer cette table, la [voici](tpnote1-tab.RData) au format `RData`
tab = comm %>%
map("fields") %>%
map_dfr(function(e) {
if (!is.null(e$xy)) {
lat = e$xy[1]
lon = e$xy[2]
} else {
lat = lon = NULL
}
attach(e, warn.conflicts = FALSE)
t = tibble(ordre, codact, libact,
adresse_complete, num, type_voie, libelle_voie,
iris, ilot, qua, arro, lon, lat)
detach(e)
return(t)
})
#  5. Créer un `tibble` à partir de la liste de tous les commerces, avec comme colonnes :
# - `ordre`, `codact`, `libact`,
# - `adresse_complete`, `num`, `type_voie`, `libelle_voie`
# - `iris`, `ilot`, `quartier`, `arro`
# - longitude et latitude (`xy` - *attention* valeurs `NULL` présentes)
# - Si vous ne réussissez pas à créer cette table, la [voici](tpnote1-tab.RData) au format `RData`
tab = comm %>%
map("fields") %>%
map_dfr(function(e) {
if (!is.null(e$xy)) {
lat = e$xy[1]
lon = e$xy[2]
} else {
lat = lon = NA
}
attach(e, warn.conflicts = FALSE)
t = tibble(ordre, codact, libact,
adresse_complete, num, type_voie, libelle_voie,
iris, ilot, qua, arro, lon, lat)
detach(e)
return(t)
})
b
save(tab, file = "tpnote1-tab.RData")
#  6. Quelles sont les dix types de commerces les plus présents ?
# (à représenter numériquement ET graphiquement)
df6 = tab %>%
group_by(libact) %>%
summarise(nb = n()) %>%
arrange(desc(nb)) %>%
slice(1:10)
df6
ggplot(df6, aes(nb, fct_reorder(libact, nb, .desc = FALSE), col = nb)) +
geom_point(size = 2) +
scale_color_continuous(low = "gray50", high = "gray10") +
theme_minimal() +
xlim(0, max(df6$nb)) +
theme(axis.title = element_blank(), legend.position = "none")
#  7. Combien y-a-t'il de commerces et de types de commerces
# par arrondissement ? (idem, table + graphique)
df7 = tab %>%
group_by(arro) %>%
summarise(
nb_commerces = n(),
nb_types = n_distinct(codact)
) %>%
mutate(arro = str_sub(arro, 4, 5))
df7
ggplot(df7, aes(arro, nb_commerces, fill = nb_commerces)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "gray50", high = "gray10") +
theme_minimal() +
labs(caption = "Nombre de commerces par arrondissement") +
theme(axis.title = element_blank(), legend.position = "none")
ggplot(df7, aes(arro, nb_types, fill = nb_types)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "gray50", high = "gray10") +
theme_minimal() +
labs(caption = "Nombre de types de commerces par arrondissement") +
theme(axis.title = element_blank(), legend.position = "none")
#  8. Réaliser une carte de Paris avec un point pour chaque commerce
# avec un fond de carte au choix
library(ggmap)
paris = c(left = min(tab$lon) - .01,
bottom = min(tab$lat) - .01,
right = max(tab$lon) + .01,
top = max(tab$lat) + .01)
tab$lon
tab$ordre
comm[1]$fields$xy[1]
comm[[1]]$fields$xy[1]
comm[[1]]$fields$xy[[1]]
comm[[1]]$fields$xy[[2]]
#  5. Créer un `tibble` à partir de la liste de tous les commerces, avec comme colonnes :
# - `ordre`, `codact`, `libact`,
# - `adresse_complete`, `num`, `type_voie`, `libelle_voie`
# - `iris`, `ilot`, `quartier`, `arro`
# - longitude et latitude (`xy` - *attention* valeurs `NULL` présentes)
# - Si vous ne réussissez pas à créer cette table, la [voici](tpnote1-tab.RData) au format `RData`
tab = comm %>%
map("fields") %>%
map_dfr(function(e) {
if (!is.null(e$xy)) {
lat = e$xy[[1]]
lon = e$xy[[2]]
} else {
lat = lon = NA
}
attach(e, warn.conflicts = FALSE)
t = tibble(ordre, codact, libact,
adresse_complete, num, type_voie, libelle_voie,
iris, ilot, qua, arro, lon, lat)
detach(e)
return(t)
})
#  6. Quelles sont les dix types de commerces les plus présents ?
# (à représenter numériquement ET graphiquement)
df6 = tab %>%
group_by(libact) %>%
summarise(nb = n()) %>%
arrange(desc(nb)) %>%
slice(1:10)
df6
save(tab, file = "tpnote1-tab.RData")
#  6. Quelles sont les dix types de commerces les plus présents ?
# (à représenter numériquement ET graphiquement)
df6 = tab %>%
group_by(libact) %>%
summarise(nb = n()) %>%
arrange(desc(nb)) %>%
slice(1:10)
df6
ggplot(df6, aes(nb, fct_reorder(libact, nb, .desc = FALSE), col = nb)) +
geom_point(size = 2) +
scale_color_continuous(low = "gray50", high = "gray10") +
theme_minimal() +
xlim(0, max(df6$nb)) +
theme(axis.title = element_blank(), legend.position = "none")
#  7. Combien y-a-t'il de commerces et de types de commerces
# par arrondissement ? (idem, table + graphique)
df7 = tab %>%
group_by(arro) %>%
summarise(
nb_commerces = n(),
nb_types = n_distinct(codact)
) %>%
mutate(arro = str_sub(arro, 4, 5))
df7
ggplot(df7, aes(arro, nb_commerces, fill = nb_commerces)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "gray50", high = "gray10") +
theme_minimal() +
labs(caption = "Nombre de commerces par arrondissement") +
theme(axis.title = element_blank(), legend.position = "none")
ggplot(df7, aes(arro, nb_types, fill = nb_types)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "gray50", high = "gray10") +
theme_minimal() +
labs(caption = "Nombre de types de commerces par arrondissement") +
theme(axis.title = element_blank(), legend.position = "none")
#  8. Réaliser une carte de Paris avec un point pour chaque commerce
# avec un fond de carte au choix
library(ggmap)
paris = c(left = min(tab$lon) - .01,
bottom = min(tab$lat) - .01,
right = max(tab$lon) + .01,
top = max(tab$lat) + .01)
carte = get_stamenmap(paris, zoom = 13, maptype = "toner-lite")
carte = get_stamenmap(paris, zoom = 11, maptype = "toner-lite")
paris
paris = c(left = min(tab$lon, na.rm = TRUE) - .01,
bottom = min(tab$lat, na.rm = TRUE) - .01,
right = max(tab$lon, na.rm = TRUE) + .01,
top = max(tab$lat, na.rm = TRUE) + .01)
carte = get_stamenmap(paris, zoom = 11, maptype = "toner-lite")
ggmap(carte)
ggmap(carte) +
theme_void()
?get_openstreetmap
carte = get_openstreetmap(paris, zoom = 11)
carte = get_openstreetmap(paris)
??map
carte = get_navermap(paris)
carte = get_cloudmademap(paris)
carte = get_stamenmap(paris, zoom = 11, maptype = "terrain")
?get_stamenmap
carte = get_stamenmap(paris, zoom = 11, maptype = "terrain-background")
carte = get_stamenmap(paris, zoom = 11, maptype = "toner-hybrid")
ggmap(carte) +
theme_void()
bbox <- c(left = -97.132, bottom = 31.536, right = -97.105, top = 31.560)
ggmap(get_stamenmap(bbox, maptype = "terrain", zoom = 14))
carte = get_stamenmap(paris, zoom = 11, maptype = "toner-lite")
ggmap(carte) +
theme_void()
ggmap(carte) +
theme_void() +
geom_point(data = tab, aes(lon, lat))
names(tab)
#  9. Représenter l'emplacement des commerces des dix types les plus
# fréquents graphiquement
ggmap(carte) +
theme_void() +
geom_point(data = tab, aes(lon, lat)) +
facet_wrap("libact")
df6
#  9. Représenter l'emplacement des commerces des dix types les plus
# fréquents graphiquement
ggmap(carte) +
theme_void() +
geom_point(data = tab %>% semi_join(df6),
aes(lon, lat, col = libact)) +
facet_wrap("libact") +
theme(legend.position = "none")
ggmap(carte) +
theme_void() +
geom_density2d(data = tab, aes(lon, lat))
ggmap(carte) +
theme_void() +
geom_density2d(data = tab, aes(lon, lat, fill = stat(level)))
ggmap(carte) +
theme_void() +
stat_density2d(data = tab, aes(lon, lat, fill = stat(level)))
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab, aes(lon, lat, fill = stat(level)))
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab, aes(lon, lat, fill = stat(level)),
geom = "polygon")
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab, aes(lon, lat, fill = stat(level)),
geom = "polygon") +
scale_fill_gradient("gray50", "gray10")
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab, aes(lon, lat, fill = stat(level)),
geom = "polygon") +
scale_fill_gradient(low = "gray50", high = "gray10")
ggmap(carte) +
theme_void() +
geom_point(data = tab %>% semi_join(df6),
aes(lon, lat, col = libact, fill = stat(level)),
geom = "polygon") +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact") +
theme(legend.position = "none")
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab %>% semi_join(df6),
aes(lon, lat, col = libact, fill = stat(level)),
geom = "polygon") +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact") +
theme(legend.position = "none")
ggmap(carte) +
theme_void() +
stat_density_2d(data = tab %>% semi_join(df6),
aes(lon, lat, fill = stat(level)),
geom = "polygon") +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact") +
theme(legend.position = "none")
# 10. Utiliser les contours des arrondissements disponible
# [ici](https://opendata.paris.fr/explore/dataset/arrondissements/map/?location=12,48.85889,2.34692)
# pour représenter, toujours sur un fond de carte de Paris, le
# nombre de commerces par arrondissements
library(geojsonio)
arr = geojson_read("arrondissements.geojson", what = "sp")
arr@data
d7
df7
inner_join(arr@data, df7 %>% mutate(arr = as.numeric(arr)))
arr@data
names(arr)@data
names(arr@data)
df7 %>% mutate(c_arr = as.numeric(arr)
)
df7$arro
inner_join(arr@data, df7 %>% mutate(c_arr = as.numeric(arro)))
names(arr@data)
inner_join(arr@data, df7 %>% mutate(c_ar = as.numeric(arro)))
arr@data = arr@data %>%
inner_join(df7 %>% mutate(c_ar = as.numeric(arro)))
arr_f = fortify(arr)
ggplot(arr_f, aes(long, lat, group = group)) +
geom_polygon(color = "white") +
theme_void()
ggmap(carte) +
geom_polygon(data = arr_f,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void()
arr_f
head(arr_f)
head(arr@data)
summary(arr_f)
summary(arr_f$id)
table(arr_f$id)
arr_fj = arr_f %>%
inner_join(arr@data %>% rownames_to_column("id"), by = "id")
ggmap(carte) +
geom_polygon(data = arr_f,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void()
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void()
df7
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_types),
color = "white") +
theme_void()
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void()
unique(arr_fj$id)
unique(arr_f$id)
names(arr@data)
arr_f = fortify(arr, region = "arro")
head(arr_f)
arr_f = fortify(arr, region = "c_ar")
head(arr_f)
arr_fj = arr_f %>%
inner_join(df7 %>% mutate(c_ar = as.numeric(arro)))
arr_f = fortify(arr, region = "c_ar")
arr_fj = arr_f %>%
inner_join(df7 %>% mutate(c_ar = as.numeric(arro)))
arr_fj = arr_f %>%
inner_join(df7 %>% mutate(id = as.numeric(arro)))
arr_fj = arr_f %>%
inner_join(df7 %>% mutate(id = as.character(as.numeric(arro))))
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void()
head(arr_fj)
head(arr_f)
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white") +
theme_void() +
scale_fill_gradient(low= "gray50", high = "gray10")
?scale_fill_gradient
?continuous_scale
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white" alpha = .5) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10", )
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white", alpha = .5) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10", )
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white", alpha = .2) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10", )
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10", )
df6$libact
df6$libact[1]
df6
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
tab %>%
semi_join(df7) %>%
group_by(libact, arro) %>%
summarise(n = n())
names(tab)
tab %>%
semi_join(df7)
df7
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
tab %>%
semi_join(df6) %>%
group_by(libact, arro) %>%
summarise(n = n())
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
tab %>%
semi_join(df6) %>%
group_by(libact, arro) %>%
summarise(n = n()) %>%
mutate(arro = str_sub(arro, 4, 5))
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
tab %>%
semi_join(df6) %>%
group_by(libact, arro) %>%
summarise(n = n()) %>%
mutate(arro = as.character(as.numeric(str_sub(arro, 4, 5))))
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
df11 = tab %>%
semi_join(df6) %>%
group_by(libact, arro) %>%
summarise(n = n()) %>%
mutate(arro = as.character(as.numeric(str_sub(arro, 4, 5))))
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
df11 = tab %>%
semi_join(df6) %>%
group_by(libact, arro) %>%
summarise(n = n()) %>%
mutate(id = as.character(as.numeric(str_sub(arro, 4, 5))))
df11_fj = arr_f %>%
inner_join(df11)
names(df11)
ggmap(carte) +
geom_polygon(data = df11_fj,
aes(long, lat, group = group, fill = n),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact")
paris = c(left = min(tab$lon, na.rm = TRUE) - .01,
bottom = min(tab$lat, na.rm = TRUE) - .01,
right = max(tab$lon, na.rm = TRUE) + .02,
top = max(tab$lat, na.rm = TRUE) + .01)
carte = get_stamenmap(paris, zoom = 11, maptype = "toner-lite")
ggmap(carte) +
geom_polygon(data = arr_fj,
aes(long, lat, group = group, fill = nb_commerces),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10")
ggmap(carte) +
geom_polygon(data = df11_fj,
aes(long, lat, group = group, fill = n),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact")
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
#df11 =
tab %>%
semi_join(df6) %>%
count(libact, arro)
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
#df11 =
tab %>%
semi_join(df6) %>%
count(libact, arro) %>%
group_by(arro) %>%
mutate(prop = n / sum(n))
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
df11 = tab %>%
semi_join(df6) %>%
count(libact, arro) %>%
group_by(arro) %>%
mutate(prop = n / sum(n))%>%
mutate(id = as.character(as.numeric(str_sub(arro, 4, 5))))
df11_fj = arr_f %>%
inner_join(df11)
ggmap(carte) +
geom_polygon(data = df11_fj,
aes(long, lat, group = group, fill = prop),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact")
# 11. Représenter graphiquement, pour chaque des dix types de commerces
# les plus présents, comment ils sont répartis dans les différents
# arrondissements
df11 = tab %>%
semi_join(df6) %>%
count(libact, arro) %>%
group_by(libact) %>%
mutate(prop = n / sum(n))%>%
mutate(id = as.character(as.numeric(str_sub(arro, 4, 5))))
df11_fj = arr_f %>%
inner_join(df11)
ggmap(carte) +
geom_polygon(data = df11_fj,
aes(long, lat, group = group, fill = prop),
color = "white", alpha = .8) +
theme_void() +
scale_fill_gradient(low = "gray50", high = "gray10") +
facet_wrap("libact")
