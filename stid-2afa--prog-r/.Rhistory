library(gganimate)
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "source")
getInternet2()
setInternet2()
setInternet2(TRUE)
?Defunct
?setInternet2
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL)
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "source")
devtools::install_github('thomasp85/gganimate')
str(p, max.level = 1)
p$data
rm(p)
setwd("~/GitHub/cours-2018-2019/stid-2afa--prog-r")
library(tidyverse)
library(jsonlite)
comm = fromJSON("commercesparis.json", simplifyVector = FALSE)
comm = comm[-83443]
#  5. Créer un `tibble` à partir de la liste de tous les commerces, avec comme colonnes :
# - `ordre`, `codact`, `libact`,
# - `adresse_complete`, `num`, `type_voie`, `libelle_voie`
# - `iris`, `ilot`, `quartier`, `arro`
# - longitude et latitude (`xy` - *attention* valeurs `NULL` présentes)
# - Si vous ne réussissez pas à créer cette table, la [voici](tpnote1-tab.RData) au format `RData`
tab = comm %>%
map("fields") %>%
map_dfr(function(e) {
lat = e$xy[[1]]
lon = e$xy[[2]]
attach(e, warn.conflicts = FALSE)
t = tibble(ordre, codact, libact,
adresse_complete, num, type_voie, libelle_voie,
iris, ilot, qua, arro, lon, lat)
detach(e)
return(t)
})
#  5. Créer un `tibble` à partir de la liste de tous les commerces, avec comme colonnes :
# - `ordre`, `codact`, `libact`,
# - `adresse_complete`, `num`, `type_voie`, `libelle_voie`
# - `iris`, `ilot`, `quartier`, `arro`
# - longitude et latitude (`xy` - *attention* valeurs `NULL` présentes)
# - Si vous ne réussissez pas à créer cette table, la [voici](tpnote1-tab.RData) au format `RData`
tab = comm %>%
map("fields") %>%
map_dfr(function(e) {
if (!is.null(e$xy)) {
lat = e$xy[[1]]
lon = e$xy[[2]]
} else {
lat = lon = NA
}
attach(e, warn.conflicts = FALSE)
t = tibble(ordre, codact, libact,
adresse_complete, num, type_voie, libelle_voie,
iris, ilot, qua, arro, lon, lat)
detach(e)
return(t)
})
comm.old = comm
comm = comm[sample(1:length(comm), 1000)]
tableau = comm %>%
map_dfr(~tibble(ordre = .x$fields$ordre,
codact = .x$fields$codact,
libact = .x$fields$libact,
adresse_complete = .x$fields$adresse_complete,
num = .x$fields$num,
type_voie = .x$fields$type_voie,
libelle_voie = .x$fields$libelle_voie,
iris = .x$fields$iris,
ilot = .x$fields$ilot,
quartier = .x$fields$qua, arro = .x$fields$arro,
Longitude = list(.x$fields$xy[[1]]),
Latitude = list(.x$fields$xy[[2]])))
View(tableau)
tableau = comm.old %>%
map_dfr(~tibble(ordre = .x$fields$ordre,
codact = .x$fields$codact,
libact = .x$fields$libact,
adresse_complete = .x$fields$adresse_complete,
num = .x$fields$num,
type_voie = .x$fields$type_voie,
libelle_voie = .x$fields$libelle_voie,
iris = .x$fields$iris,
ilot = .x$fields$ilot,
quartier = .x$fields$qua, arro = .x$fields$arro,
Longitude = list(.x$fields$xy[[1]]),
Latitude = list(.x$fields$xy[[2]])))
View(tableau)
grpby = tableau %>%
group_by(arro) %>%
summarise(
n = n(),
nb_distinct_type = n_distinct(libact))
ggplot(grpby, aes(as.character(arro),n )) + geom_point() + ggtitle("Nombre de type de commerce différent par arrondissement") + xlab('Arrondissement') + ylab("Nombre de commerce")
"pls_represente = tableau %>%
group_by(libact) %>%
summarise(
n = n(),
desc(n)) %>%
slice(1:10)
ggplot(pls_represente, aes(libact,n )) + geom_point() +
theme(axis.text.x = element_text(angle = -90))
"
pls_represente = tableau %>%
group_by(libact) %>%
summarise(
n = n(),
desc(n)) %>%
slice(1:10)
ggplot(pls_represente, aes(libact,n )) + geom_point() +
theme(axis.text.x = element_text(angle = -90))
rm(grpby, pls_represente, tableau)
table1 = comm %>% map_dfr(~ tibble(Ordre = .x$fields$ordre , Code_activité = .x$fields$codact , Libact = .x$fields$libact
, Adresse = .x$fields$adresse_complete , Num = .x$fields$num , Type_Voie = .x$fields$type_voie
, Voie = .x$fields$libelle_voie , Iris = .x$fields$iris ,Ilot = .x$fields$ilot
, Quartier = .x$fields$qua , Arrondissement = .x$fields$arro,
Longitude = list(.x$fields$xy[[1]]),
Latitude = list(.x$fields$xy[[2]])
)
)
#numérique
table1 %>% group_by(arro) %>% summarise(nbCommerces = n(), nbTypeCommerce = n_distinct(Libact))
#graphiquement
g = ggplot(data=table1, aes(x=Arrondissement)) + geom_bar()
g + labs(x = "arrondissement", y="nombre de commerces") + ggtitle("Nombre de commerces par arrondissements")
#numérique
table1 = table1 %>% group_by(Libact) %>% summarise(nbTypeCommerce = n())
table2 = table1 %>% arrange(desc(nbTypeCommerce))
table2 %>% slice(1:10)
rm(g, table1, table2)
tb = comm %>% map_dfr(~ tibble(ordre = .x$fields$ordre , codact = .x$fields$codact , libact = .x$fields$libact
, adresseComplete = .x$fields$adresse_complete , Numero = .x$fields$num , typeVoie = .x$fields$type_voie
, libelleVoie = .x$fields$libelle_voie , iris = .x$fields$iris ,ilot = .x$fields$ilot
, quart = .x$fields$qua , arrondissement = .x$fields$arro,
longit = list(.x$fields$xy[[1]]),
latit = list(.x$fields$xy[[2]])
))
tb%>% group_by(arrondissement) %>% summarise(nbCommerces = n(), nbTypeCommerce = n_distinct(libact))
g = ggplot(data=tb, aes(x=arrondissement)) + geom_histogram()
g + labs(x = "arrondissement", y="nombre de commerces")
comm = comm.old
tb%>% group_by(arrondissement) %>% summarise(nbCommerces = n(), nbTypeCommerce = n_distinct(libact))
g = ggplot(data=tb, aes(x=arrondissement)) + geom_histogram()
g + labs(x = "arrondissement", y="nombre de commerces")
tb = comm %>% map_dfr(~ tibble(ordre = .x$fields$ordre , codact = .x$fields$codact , libact = .x$fields$libact
, adresseComplete = .x$fields$adresse_complete , Numero = .x$fields$num , typeVoie = .x$fields$type_voie
, libelleVoie = .x$fields$libelle_voie , iris = .x$fields$iris ,ilot = .x$fields$ilot
, quart = .x$fields$qua , arrondissement = .x$fields$arro,
longit = list(.x$fields$xy[[1]]),
latit = list(.x$fields$xy[[2]])
))
tb%>% group_by(arrondissement) %>% summarise(nbCommerces = n(), nbTypeCommerce = n_distinct(libact))
g = ggplot(data=tb, aes(x=arrondissement)) + geom_histogram()
g + labs(x = "arrondissement", y="nombre de commerces")
tabprov = tb %>% group_by(libact) %>% summarise(nbTypeCommerce = n())
tabprov2 = tabprov %>% arrange(desc(nbTypeCommerce))
tabprov2 %>% slice(1:10)
library(leaflet)
library(geojsonio)
json_file <- 'https://datahub.io/core/geo-countries/r/countries.geojson'
etats = geojson_read(json_file, what = "sp")
rm(g, tab, tabprov, tabprov2)
rm(json_file)
rm(tb)
rm(comm.old)
library(tibble)
tab = comm %>% map_dfr(~ tibble(rdre = .x$fields$ordre , codeActivite = .x$fields$codact , libelleActivite = .x$fields$libact
, adresse = .x$fields$adresse_complete , num = .x$fields$num , typeVoie = .x$fields$type_voie
, libelleVoie = .x$fields$libelle_voie , iris = .x$fields$iris ,ilot = .x$fields$ilot
, quartier = .x$fields$qua , arrondissement = .x$fields$arro,
longitude = list(.x$fields$xy[[1]]),
latitude = list(.x$fields$xy[[2]])))
library(flexdashboard)
load("http://fxjollois.github.io/donnees/ca/ca.RData")
load("../../../../Downloads/ca.RData")
library(flexdashboard)
View(provenance)
mois
mois$mois
iconv(mois$mois, to = "latin1"
)
iconv(mois$mois, to = "latin1")
iconv(mois$mois, to = "UTF-8")
iconv(mois$mois, to = "windows1252")
iconv(mois$mois, to = "windows1232")
iconv(mois$mois, to = "ISO-8859-1")
iconv(mois$mois, to = "ISO-8859-16")
iconv(mois$mois, to = "UTF-8", from ="latin1")
iconv(mois$mois, to = "UTF-8", from ="windows1252")
iconv(mois$mois, to = "UTF-8", from ="ISO-8859-1")
iconv(mois$mois, from = "UTF-8", to ="ISO-8859-1")
mois$mois = iconv(mois$mois, from = "UTF-8", to ="ISO-8859-1")
mois
provenance$provenance = iconv(provenance$provenance, from = "UTF-8", to ="ISO-8859-1")
provenance
groupe
groupe$departement
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
head(groupe=)
head(groupe)
groupe$departement = f(groupe$departement)
groupe$groupe = f(groupe$groupe)
groupe$sous_groupe = f(groupe$sous_groupe)
head(groupe)
comm
rm(comm)
ca_evol
head(ca_evol)
lapply(head(ca_evol), f)
as.data.frame(lapply(head(ca_evol), f))
ca_evol = as.data.frame(lapply(ca_evol, f))
ca_tout = as.data.frame(lapply(ca_tout, f))
ca = as.data.frame(lapply(ca, f))
rm(tab)
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
d = function(a) { as.data.frame(lapply(a, f)) }
groupe = d(groupe)
mois = d(mois)
provenance = d(provenance)
ca = d(ca)
ca_evol = d(ca_evol)
ca_tout = d(ca_tout)
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
d = function(a) { as.data.frame(lapply(a, f)) }
groupe = d(groupe)
mois = d(mois)
provenance = d(provenance)
ca = d(ca)
ca_evol = d(ca_evol)
ca_tout = d(ca_tout)
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
knitr::opts_chunk$set(eval = FALSE)
ca_tout %>%
grouup_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
library(tidyverse)
ca_tout %>%
grouup_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
ca_tout %>%
group_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
class(ca_tout$ca    )
?iconv
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1", toRaw = T) }
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1", toRaw = T) }
d = function(a) { as.data.frame(lapply(a, f)) }
groupe = d(groupe)
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1", toRaw = T) }
d = function(a) {
as.data.frame(
lapply(
a,
function(c) {
if (is.character(c)) f(c)
}
)
)
}
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
d = function(a) {
as.data.frame(
lapply(
a,
function(c) {
if (is.character(c)) f(c)
}
)
)
}
groupe = d(groupe)
mois = d(mois)
provenance = d(provenance)
ca = d(ca)
ca_evol = d(ca_evol)
ca_tout = d(ca_tout)
class(ca_tout$ca)
summ(ca_tout$ca)
sum(ca_tout$ca)
is.character(ca$mois)
library(flexdashboard)
library(tidyverse)
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
d = function(a) {
as.data.frame(
lapply(
a,
function(c) {
if (is.factor(c)) f(c)
}
)
)
}
groupe = d(groupe)
library(flexdashboard)
library(tidyverse)
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
d = function(a) {
as.data.frame(
lapply(
a,
function(c) {
if (is.factor(c)) {
f(c)
} else {
c
}
}
)
)
}
groupe = d(groupe)
mois = d(mois)
provenance = d(provenance)
ca = d(ca)
ca_evol = d(ca_evol)
ca_tout = d(ca_tout)
summary(ca_tout)
ca_tout %>%
group_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", ylab = "Chiffre d'affaires (M€)")
tab1 = ca_tout %>%
group_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", ylab = "Chiffre d'affaires (M€)")
tab1
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(tab1$CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", ylab = "Chiffre d'affaires (M€)")
tab1 = ca_tout %>%
group_by(mois_no) %>%
summarise(CA = sum(ca) / 1000000)
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(tab1$CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", ylab = "Chiffre d'affaires (M€)")
d = setNames(aggregate(ca / 1000000 ~ mois_no, ca_tout, sum), c("mois", "ca"))
par(mar = c(4, 4, 0, 0) + .1)
plot(ca ~ mois, d, type = "b",
xlab = "Mois", ylab = "Chiffre d'affaires (M€)")
abline(h = mean(d$ca), lty = 3, col = "gray50")
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(tab1$CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", ylab = "Chiffre d'affaires (M€)")
ggplot(tab1, aes(mois_no, CA)) +
geom_line() +
geom_hline(yintercept = mean(tab1$CA), lty = 3, col = "gray50") +
theme_minimal() +
labs(x = "Mois", y = "Chiffre d'affaires (M€)")
ca_evol %>%
groupby(mois, mois_numero) %>%
summarise(
CA2003 = sum(ca2003) / 1000,
CA2004 = sum(ca2004) / 1000,
evolution = su(evolution) / 1000
)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
CA2003 = sum(ca2003) / 1000,
CA2004 = sum(ca2004) / 1000,
evolution = su(evolution) / 1000
)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
CA2003 = sum(ca2003) / 1000,
CA2004 = sum(ca2004) / 1000,
evolution = sum(evolution) / 1000
)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
2003 = sum(ca2003) / 1000,
2004 = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
arrange(mois_numero) %>%
select(-mois_numero)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
2003 = sum(ca2003) / 1000,
2004 = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
arrange(mois_numero) %>%
select(-mois_numero)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
arrange(mois_numero) %>%
select(-mois_numero)
ca_evol %>%
group_by(mois, mois_numero) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
arrange(mois_numero) %>%
select(-mois_numero) %>%
rename(Mois = mois)
d = aggregate(ca ~ annee, ca_tout, sum)
d
ca_tout %>% filter(annee == 2003)
ca_tout %>% filter(annee == 2003) %>% summarise(sum(ca))
v = paste(round((total2004 / total2003 - 1) * 100, 2), "%")
total2003 = ca_tout %>% filter(annee == 2003) %>% summarise(sum(ca))
total2004 = ca_tout %>% filter(annee == 2004) %>% summarise(sum(ca))
v = paste(round((total2004 / total2003 - 1) * 100, 2), "%")
valueBox(v, icon = "fa-arrow-circle-up", color = "green")
?valueBox
valueBox(42, caption = "Errors", icon="fa-thumbs-down")
update.packages()
update.packages()
update.packages()
ca_evol %>%
group_by(departement) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(`Département` = departement)
library(tidyverse)
ca_evol %>%
group_by(departement) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(`Département` = departement)
load("../../../../../Downloads/ca.RData")
f = function(a) { iconv(a, from = "UTF-8", to ="ISO-8859-1") }
groupe = d(groupe)
mois = d(mois)
d = function(a) { as.data.frame(lapply(a, function(c) {
if (is.factor(c)) {
f(c)
} else {
c
}
})) }
groupe = d(groupe)
mois = d(mois)
provenance = d(provenance)
ca = d(ca)
ca_evol = d(ca_evol)
ca_tout = d(ca_tout)
library(flexdashboard)
ca_evol %>%
group_by(departement) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(`Département` = departement)
install.packages("fansi")
ca_evol %>%
group_by(departement) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(`Département` = departement)
evol.dpt = ca_evol %>%
group_by(departement) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(`Département` = departement)
evol.prov = ca_evol %>%
group_by(provenance) %>%
summarise(
`2003` = sum(ca2003) / 1000,
`2004` = sum(ca2004) / 1000,
Evolution = sum(evolution) / 1000
) %>%
rename(Provenance = provenance)
gauge(sum(evol.dpt$Evolution > 0), 0, nrow(evol.dpt))
valueBox(evol.dpt$Département[which.max(evol.dpt$Evolution)], icon = "fa-level-up")
