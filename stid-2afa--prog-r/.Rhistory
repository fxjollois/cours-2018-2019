wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_replace(e, ".", ""))
wgi.m
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_if(vars(contains(".")) , function(e) str_replace(e, ".", ""))
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "."))
wgi.m
?str_remove
str_remove("Country.Code", ".")
str_remove("Country.Code", "\.")
str_remove("Country.Code", "\\.")
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\."))
wgi.m
wgi.m %>% select(CountryCode, CountryName) %>% distinct() %>%
write.table("WGI_Country.csv", sep = ";", row.names = FALSE)
readLines("WGI_Country.csv", 10)
wgi.m %>% select(SeriesCode, SeriesName) %>% distinct() %>%
write.table("WGI_Series.csv", sep = ";", row.names = FALSE)
names(wgi.m)
wgi.m %>% select(IndicatorCode, IndicatorName) %>% distinct() %>%
write.table("WGI_Series.csv", sep = ";", row.names = FALSE)
readLines("WGI_Series.csv", 10)
rm(list = ls())
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\."))
wgi.m
# Table des types d'indicateurs à découper en deux
ind = wgi.m %>% select(IndicatorCode, IndicatorName) %>% distinct()
ind
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SeriesCode = str_sub(IndicatorCode, 1, 2))
wgi.m
wgi.m %>% select(IndicatorCode, SeriesCode)
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
TypeCode = str_sub(IndicatorCode, 3))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode)
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
TypeCode = str_sub(IndicatorCode, 4))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode)
names(wgi.m)
?str_extract
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
SerieName = str_extract(IndicatorCode, ".+:"),
TypeCode = str_sub(IndicatorCode, 4))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode)
wgi.m %>% select(IndicatorName, SerieName)#, TypeCode)
str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"
)
str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:")
?str_pad
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), 1)
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), 1, left)
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), 1, "left")
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), -1, "left")
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), -10, "left")
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), 10, "left")
str_pad(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), 10, "right")
str_sub()
str_sub(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), end = -1)
str_sub(str_extract("Control of Corruption: Estimate", "[a-zA-Z ]+:"), end = -2)
str_sub(str_extract("Control of Corruption: Estimate", "[^:]+:"), end = -2)
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
SerieName = str_sub(str_extract(IndicatorCode, "[^:]+:"),end = -2),
TypeCode = str_sub(IndicatorCode, 4))
wgi.m %>% select(IndicatorName, SerieName)#, TypeCode)
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode)
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
SerieName = str_sub(str_extract(IndicatorName, "[^:]+:"),end = -2),
TypeCode = str_sub(IndicatorCode, 4),
TypeName = str_sub(str_extract(IndicatorName, ":.+"), start = 2))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode) %>% distinct()
wgi.m %>% select(IndicatorName, SerieName, TypeName) %>% distinct()
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
SerieName = str_sub(str_extract(IndicatorName, "[^:]+:"),end = -2),
TypeCode = str_sub(IndicatorCode, 4),
TypeName = str_sub(str_extract(IndicatorName, ":.+"), start = 3))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode) %>% distinct()
wgi.m %>% select(IndicatorName, SerieName, TypeName) %>% distinct()
wgi.m %>% select(SerieCode, SerieName) %>% distinct()
# Table des types d'indicateurs à découper en deux
wgi.m %>% select(SerieCode, SerieName) %>% distinct() %>%
write.table("WGI_Series.csv", sep = ";", row.names = FALSE)
readLines("WGI_Series.csv", 10)
wgi.m %>% select(TypeCode, TypeName) %>% distinct()
wgi.m %>% select(TypeCode, TypeName) %>% distinct() %>%
write.table("WGI_Series.csv", sep = ";", row.names = FALSE)
readLines("WGI_Series.csv", 10)
wgi.m %>% select(CountryCode, SerieCode, TypeCode, start_with("Y"))
wgi.m %>% select(CountryCode, SerieCode, TypeCode, starts_with("Y"))
library(tidyverse)
# Lecture des données
wgi.m = read.table("WGIData.csv",
stringsAsFactors = FALSE,
quote = '"', header = T, sep = ",") %>%
as_tibble() %>%
select(-end) %>%
rename_at(vars(starts_with("X")) , function(e) str_replace(e, "X", "Y")) %>%
rename_at(vars(contains(".")) , function(e) str_remove(e, "\\.")) %>%
mutate(SerieCode = str_sub(IndicatorCode, 1, 2),
SerieName = str_sub(str_extract(IndicatorName, "[^:]+:"),end = -2),
TypeCode = str_sub(IndicatorCode, 4),
TypeName = str_sub(str_extract(IndicatorName, ":.+"), start = 3))
wgi.m %>% select(IndicatorCode, SerieCode, TypeCode) %>% distinct()
wgi.m %>% select(IndicatorName, SerieName, TypeName) %>% distinct()
# Table des pays
wgi.m %>% select(CountryCode, CountryName) %>% distinct() %>%
write.table("WGICountry.csv", sep = ";", row.names = FALSE)
readLines("WGICountry.csv", 10)
# Table des types d'indicateurs à découper en deux
wgi.m %>% select(SerieCode, SerieName) %>% distinct() %>%
write.table("WGISerie.csv", sep = ";", row.names = FALSE)
readLines("WGISerie.csv", 10)
wgi.m %>% select(TypeCode, TypeName) %>% distinct() %>%
write.table("WGIType.csv", sep = ";", row.names = FALSE)
readLines("WGIType.csv", 10)
# Table des valeurs
wgi.m %>% select(CountryCode, SerieCode, TypeCode, starts_with("Y")) %>%
write.table("WGIValues.csv", sep = ";", row.names = FALSE)
readLines("WGIValues.csv", 10)
rm(ind)
?gather
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
gather(stocks, stock, price, -time)
names(wgi.m)
# une année par ligne
wgi.m %>% gather(CountryName, CountryCode, IndicatorName, IndicatorCode,
SerieCode, SerieName, TypeCode, TypeName, -Year)
stocks
# une année par ligne
wgi.m %>% gather(Year, Value,
-CountryName, -CountryCode, -IndicatorName, -IndicatorCode,
-SerieCode, -SerieName, -TypeCode, -TypeName)
# une année par ligne
wgi.m %>%
select(CountryCode, SerieCode, TypeCode, starts_with("Y")) %>%
gather(Year, Value,-CountryCode, -SerieCode, -TypeCode)
country = wgi.m %>% select(CountryCode, CountryName) %>% distinct()
serie = wgi.m %>% select(SerieCode, SerieName) %>% distinct()
type = wgi.m %>% select(TypeCode, TypeName) %>% distinct()
values = wgi.m %>% select(CountryCode, SerieCode, TypeCode, starts_with("Y"))
values
knitr::opts_chunk$set(echo = TRUE)
values %>%
gather(Year, Value,-CountryCode, -SerieCode, -TypeCode)
values_long = values %>%
gather(Year, Value,-CountryCode, -SerieCode, -TypeCode)
country %>% count()
sum(is.na(values_long))
values_long %>%
group_by(CountryCode) %>%
summarise(nbNA = sum(is.na(Value)))
values_long %>%
group_by(CountryCode) %>%
summarise(nbNA = sum(is.na(Value))) %>%
filter(nbNA > 0)
values_long %>%
group_by(CountryCode) %>%
summarise(nbNA = sum(is.na(Value))) %>%
filter(nbNA > 0) %>%
arrange(desc(nbNA))
values_long %>%
group_by(CountryCode) %>%
summarise(nbNA = sum(is.na(Value))) %>%
filter(nbNA > 0) %>%
arrange(desc(nbNA)) %>%
inner_join(country)
values_long %>%
group_by(CountryCode) %>%
summarise(nbNA = sum(is.na(Value)) / 6) %>%
filter(nbNA > 0) %>%
arrange(desc(nbNA)) %>%
inner_join(country)
values %>%
inner_join(country) %>%
filter(CountryName == "France")
type
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate")
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
select(starts_with("Y"))
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
select(SerieName, starts_with("Y"))
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
inner_join(serie) %>%
select(SerieName, starts_with("Y"))
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
inner_join(serie) %>%
select(SerieName, starts_with("Y")) %>%
transpose()
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
inner_join(serie) %>%
select(SerieName, starts_with("Y")) %>% temp
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
inner_join(serie) %>%
select(SerieName, starts_with("Y")) -> temp
temp
temp %>% gather(Year, Value, -SerieName)
?spread
temp %>% gather(Year, Value, -SerieName) %>%
spread(SerieName, Value)
values %>% filter(TypeCode== "EST")
values %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
)
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
)
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
)
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
) %>%
arrange(desc(Moyenne))
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
) %>%
arrange(desc(Moyenne)) %>%
inner_join(country) %>%
select(CountryName, all())
?select
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
) %>%
arrange(desc(Moyenne)) %>%
inner_join(country) %>%
select(CountryName, everything())
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
) %>%
arrange(desc(Moyenne)) %>%
inner_join(country) %>%
select(CountryName, -CountryCode, everything())
?drop
values_long %>%
filter(SerieCode == "CC" & TypeCode == "EST") %>%
group_by(CountryCode) %>%
summarise(
Moyenne = mean(Value, na.rm = TRUE),
Maximum = max(Value, na.rm = TRUE),
Minimum = min(Value, na.rm = TRUE)
) %>%
arrange(desc(Moyenne)) %>%
inner_join(country) %>%
select(-CountryCode) %>%
select(CountryName, everything())
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type)
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate")
values %>%
inner_join(country) %>%
filter(CountryName == "France") %>%
inner_join(type) %>%
filter(TypeName == "Estimate") %>%
inner_join(serie) %>%
select(SerieName, starts_with("Y"))
fromJSON("https://swapi.co/api/people/1/")
library(jsonlite)
fromJSON("https://swapi.co/api/people/1/")
sw = read_html("https://www.imdb.com/title/tt0076759/")
library(rvest)
sw = read_html("https://www.imdb.com/title/tt0076759/")
sw
sw%>% html_nodes("span")
sw%>% html_nodes("strong span")
sw
sw %>% html_nodes("body")
sw%>% html_nodes(".ratingValue")
sw%>% html_nodes(".ratingValue span")
sw%>% html_nodes(".ratingValue span") %>% limit(1)
sw%>% html_nodes(".ratingValue span") %>% limits(1)
??limite
??limit
sw%>% html_nodes(".ratingValue span") %>% head(1)
sw%>% html_nodes(".ratingValue span") %>% slice(1)
sw%>% html_nodes(".ratingValue span") %>% html_text() %>% slice(1)
sw %>% html_nodes(".ratingValue span") %>% html_text() %>% head(1)
sw %>%
html_nodes(".ratingValue span") %>%
html_text() %>%
as.numeric() %>%
head(1)
sw %>%
html_nodes(".ratingValue span") %>%
html_text() %>%
head(1) %>%
as.numeric()
fromJSON("https://swapi.co/api/people/1/")
tpe
type
serie
?html_nodes
knitr::opts_chunk$set(eval = FALSE)
x = rnorm(1000)
mean(x)
x %>% mean()
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocks
stocksm
mtcars %>%
rownames_to_column("car") %>%
gather(variable, value, -car)
mtcars %>%
rownames_to_column("car") %>%
as_tibble() %>%
gather(variable, value, -car)
tab_longue = mtcars %>%
rownames_to_column("car") %>%
as_tibble() %>%
gather(variable, value, -car)
tab_longue
tab_longue %>%
spread(car, variable)
tab_longue
tab_longue %>%
spread(variable, car)
stocksm
tab_longue
as.data.Frame(tab_longue)
as.data.frame(tab_longue)
as.data.frame(tab_longue) %>% spread(variable, car)
as.data.frame(tab_longue) %>% spread(car, variable)
row.names(tab_longue)
tab_longue %>%
spread(variable, car)
tab_longue %>%
rowid_to_column() %>%
spread(variable, car)
tab_longue %>%
#  rowid_to_column() %>%
spread(variable, value)
tab_longue %>%
spread(car, value)
str_subset(mt$car, "Merc")
mt = mtcars %>% rownames_to_column("car")
str_length(mt$car)
str_c(mt$car, collapse = ", ")
str_sub(mt$car, 1, 3)
str_subset(mt$car, "Merc")
str_subset(mt$car, "[0-9]")
str_detect(mt$car, "[0-9]")
str_match(mt$car, "(.+)[ ](.+)")
str_split(mt$car, " ")
today = today()
bday = ymd("19771114")
diff = today - bday
diff
as.period(diff)
as.duration(diff)
