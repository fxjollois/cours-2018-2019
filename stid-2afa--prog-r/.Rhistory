pers$results %>% map(~ .x$name + .x$gender)
pers$results %>% map(~ paste(.x$name, .x$gender))
pers$results %>% map(~ paste(.x$name, "-", .x$gender))
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_dfr(~ as.data.frame(t(as.matrix(coef(.)))), .id = "cyl")
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map(~ c(names(.), coef(.))) #%>%
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map(~ c(names(.), coef(.)))
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map(~ c(names(.), coef(.))) %>%
map_dfr(~ as.data.frame(t(.)))
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_dfr(~ as.data.frame(t(as.matrix(coef(.)))), .id = "cyl")
pers$results
pers$count
pers$next
str(pers, max.level = 1)
pers$previous
pers$next
pers$"next"
pers[["next"]]
pers = jsonlite::fromJSON("https://swapi.co/api/people/", simplifyVector = FALSE)
pers = jsonlite::fromJSON("https://swapi.co/api/people/?page=8", simplifyVector = FALSE)
pers$previous
pers$"next"
pers = jsonlite::fromJSON("https://swapi.co/api/people/?page=9", simplifyVector = FALSE)
pers$"next"
is.null(pers[["next"]])
pers = jsonlite::fromJSON("https://swapi.co/api/people/", simplifyVector = FALSE)
people = pers$results
page = 1
while(!is.null(pers[["next"]])) {
url = paste0("https://swapi.co/api/people/?page=", page)
pers = jsonlite::fromJSON(url, simplifyVector = FALSE)
people = c(people, pers$results)
}
length(people)
pers = jsonlite::fromJSON("https://swapi.co/api/people/", simplifyVector = FALSE)
people = pers$results
page = 1
while(!is.null(pers[["next"]])) {
url = paste0("https://swapi.co/api/people/?page=", page)
pers = jsonlite::fromJSON(url, simplifyVector = FALSE)
people = c(people, pers$results)
page = page + 1
}
length(people)
pers = jsonlite::fromJSON("https://swapi.co/api/people/", simplifyVector = FALSE)
people = pers$results
while(!is.null(pers[["next"]])) {
pers = jsonlite::fromJSON(pers[["next"]], simplifyVector = FALSE)
people = c(people, pers$results)
}
length(people)
map(people, "name")
map_chr(people, "name")
getList <- function(type) {
url = paste0("https://swapi.co/api/", type, "/")
res = jsonlite::fromJSON(url, simplifyVector = FALSE)
lis = res$results
while (!is.null(res[["next"]])) {
res = jsonlite::fromJSON(res[["next"]], simplifyVector = FALSE)
lis = c(list, res$results)
}
return(lis)
}
people2 = getList("people")
length(people2)
getList <- function(type) {
url = paste0("https://swapi.co/api/", type, "/")
res = jsonlite::fromJSON(url, simplifyVector = FALSE)
lis = res$results
while (!is.null(res[["next"]])) {
res = jsonlite::fromJSON(res[["next"]], simplifyVector = FALSE)
lis = c(lis, res$results)
}
return(lis)
}
people2 = getList("people")
length(people2)
map_chr(people2, "name")
pers = jsonlite::fromJSON("https://swapi.co/api/people/", simplifyVector = FALSE)
pers = jsonlite::fromJSON("https://swapi.co/api/truc/", simplifyVector = FALSE)
persos = getList("people")
films = getList("films")
especes = getList("species")
vehicules = getList("vehicles")
vaisseaux = getList("starships")
planetes = getList("planets")
length(persos)
length(films)
length(epseces)
length(especes)
length(vehicules)
length(vaisseaux)
length(planetes)
perso %>%
map("films")
persos %>%
map("films")
e = persos[[1]]
e$filme
e$films
str_split(e$films, "/")
str_split(e$films, "/") %>% map(6)
str_split(e$films, "/") %>% map_int(6)
str_split(e$films, "/") %>% map_chr(6)
str_split(e$films, "/") %>% map_chr(6) %>% as.numeric()
persos %>%
map(function(e) {
e$films = str_split(e$films, "/") %>% map_chr(6) %>% as.numeric()
return(e)
})
persos = persos %>%
map(function(e) {
e$films = str_split(e$films, "/") %>% map_chr(6) %>% as.numeric()
return(e)
})
persos %>% map("films")
getNumbers <- function(v) {
if (is_empty(v)) return (NULL)
str_split(v, "/") %>% map_chr(6) %>% as.numeric()
}
persos %>%
map(function(e) {
for (att in c("homeworld", "films", "species", "vehicles", "starships")) {
e[[att]] = getNumbers(e[[att]])
}
return (e)
}) -> persos
persos %>%
map(function(e) {
for (att in c("homeworld", "species", "vehicles", "starships")) {
e[[att]] = getNumbers(e[[att]])
}
return (e)
}) -> persos
persos %>% map("homeworld")
persos %>% map("films")
persos %>% map("species")
persos %>% map("vehicles")
persos %>% map("starships")
persos[[86]]
persos %>%
map(function(e) {
e$nfilms = length(e$films)
return(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms")]))
}) %>%
map_dfr(~ data.frame(.x))
films[[1]]
persos[[1]]
persos[[1]]$species
especes[[1]]
especes[[1]]$name
persos[[1]]$species
especes[[persos[[1]]$species]]$name
persos %>%
map(function(e) {
e$nfilms = length(e$films)
e$espece = especes[[e$species]]$name
return(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")]))
}) %>%
map_dfr(~ data.frame(.x))
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")]))
}) %>%
map_dfr(~ data.frame(.x))
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
View(df)
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
View(df)
View(df)
df$species
e = persos[[1]]
e[c("name", "gender")]
t(e[c("name", "gender")])
class(t(e[c("name", "gender")]))
class(t(e[c("name", "gender")])[1,])
class(t(e[c("name", "gender")])[,1])
data.frame(t(e[c("name", "gender")]))
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(t(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")])))
}) %>%
map_dfr(~ data.frame(.x)) -> df
View(df)
df$species
e
as.data.frame(e)
as.data.frame(e[c("name", "gender")])
data.frame(e[c("name", "gender")])
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
data.frame(e[c("name", "gender", "height")])
data.frame(e[c("name", "gender", "height", "mass")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms")])
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species")])
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")])
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]))
})
persos %>%
map(function(e) {
print(e$name)
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]))
})
persos %>% filter(function(e) { e$name == "Ric Olié" })
persos %>% filter(name == "Ric Olié")
df$name == "Ric Olié"
which(df$name == "Ric Olié")
persos[[37]]
e = persos[[37]]
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")])
e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "species", "espece")]
persos %>%
map(function(e) {
print(e$name)
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")]))
}) %>%
map_dfr(~ data.frame(.x)) -> df
warnings()
persos %>%
map(function(e) {
e$nfilms = length(e$films)
if (!is.null(e$species)) {
e$espece = especes[[e$species]]$name
} else {
e$espece = NA
}
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")], stringsAsFactors = FALSE))
}) %>%
map_dfr(~ data.frame(.x)) -> df
View(df)
persos %>%
map(function(e) {
e$nfilms = length(e$films)
e$espece = ifelse(!is.null(e$species), especes[[e$species]]$name, NA)
return(data.frame(e[c("name", "gender", "height", "mass", "hair_color", "skin_color", "eye_color", "birth_year", "nfilms", "espece")], stringsAsFactors = FALSE))
}) %>%
map_dfr(~ data.frame(.x)) -> df
map(persos, ~filter(.x, name == "Ric Olié"))
persos %>% keep(function(e) e$name == "Ric Olié")
persos %>%
keep(gender == "male")
?keep
persos %>%
keep(~ .x$gender == "male")
persos %>%
keep(~ .x$gender == "male") %>%
map(~ paste(.x$name, .x$gender))
persos %>%
keep(~ .x$gender == "male") %>%
map(~ paste(.x$name, .x$gender, sep = " - "))
persos %>%
discard(~ .x$gender == "male") %>%
map(~ paste(.x$name, .x$gender, sep = " - "))
persos %>%
keep(function(e) {
return(1 %in% e$films)
}) %>%
map("films")
persos[[1]]$films
films %>% map("name")
films[[1]]
films %>% map("title")
films %>% map_chr("title")
which(films %>% map_chr("title") == "A New Hope")
1:10 %>% accumulate(~ .x)
1:10 %>% accumulate(~ .y)
rerun(10)
rerun(10, rnorm)
rerun(10, rnorm(1))
rerun(10, rnorm(5))
iris %>% when(nrow(.) < 10 ~ ., ~ head(10))
iris %>% when(nrow(.) < 10 ~ ., ~ head(.))
iris[1:8,] %>% when(nrow(.) < 10 ~ ., ~ head(.))
data = jsonlite::fromJSON(url)
data
rm(list =ls())
data = jsonlite::fromJSON(url)
url = "https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20weather.forecast%20where%20woeid%20in%20(select%20woeid%20from%20geo.places(1)%20where%20text%3D%22Paris%2C%20France%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
data = jsonlite::fromJSON(url)
daat
data
str(data, max.level = 1)
str(data, max.level = 2)
str(data$query, max.level = 1)
str(data$query, max.level = 2)
str(data$query$results, max.level = 1)
str(data$query$results, max.level = 2)
data$query$results$channel$atmosphere
data$query$results$channel$location
data$query$results$channel$lastBuildDate
data = jsonlite::fromJSON(url)
data$query$results$channel$lastBuildDate
url = "https://opendata.paris.fr/api/records/1.0/search/?dataset=velib-disponibilite-en-temps-reel"
data = jsonlite::fromJSON(url)
data
data$records$record_timestamp
data = jsonlite::fromJSON(url)
data$records$record_timestamp
data = jsonlite::fromJSON(url)
data$records$record_timestamp
library(gganimate)
install.packages("gganimate")
devtools::install_github('thomasp85/gganimate')
devtools::install_github('thomasp85/gganimate')
devtools::install_github("RcppCore/Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github('thomasp85/gganimate')
install.packages("Rtools")
find_rtools()
install.packages("pkgbuild")
install.packages("devtools")
install.packages("devtools")
pkgbuild::with_build_tools(remotes::install_github("thomasp85/gganimate"))
pkgbuild::with_build_tools(remotes::install_github("thomasp85/gganimate"))
pkgbuild::with_build_tools(remotes::install_github("thomasp85/tweenr"))
library(pkgbuild)
library(devtools)
find_rtools()
find_rtools()
library(devtools)
library(pkgbuild)
find_rtools()
pkgbuild::with_build_tools(remotes::install_github("thomasp85/gganimate"))
devtools::install_github('thomasp85/gganimate')
devtools::install_github('dgrtwo/gganimate')
devtools::install_github('dgrtwo/gganimate')
devtools::install_github('thomasp85/gganimate')
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "win.binary")
library(ggplot2)
library(gganimate)
# For example, suppose we wanted to create an animation similar to the Gapminder
# world animation, using Jenny Bryan's gapminder package for the data.
library(gapminder)
theme_set(theme_bw())
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10()
# Notice we added frame = year and saved the plot as p.
# We then display it as an animation with the gg_animate function:
gg_animate(p)
install.packages("gapminder")
library(ggplot2)
library(gganimate)
# For example, suppose we wanted to create an animation similar to the Gapminder
# world animation, using Jenny Bryan's gapminder package for the data.
library(gapminder)
theme_set(theme_bw())
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10()
# Notice we added frame = year and saved the plot as p.
# We then display it as an animation with the gg_animate function:
gg_animate(p)
p
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
??transition_time
??transition
library(gganimate)
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "source")
getInternet2()
setInternet2()
setInternet2(TRUE)
?Defunct
?setInternet2
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL)
install.packages("C:/Users/François-XavierJollo/Downloads/gganimate-master.zip", repos = NULL, type = "source")
devtools::install_github('thomasp85/gganimate')
setwd("~/GitHub/cours-2018-2019/stid-2afa--prog-r")
library(jsonlite)
stations = fromJSON(url_stations)
# stations
url_stations = "https://opendata.paris.fr/api/records/1.0/search/?dataset=velib-emplacement-des-stations"
stations = fromJSON(url_stations)
stations
stations = fromJSON(url_stations, simplifyVector = FALSE)
stations
stations$parameters
stations$nhits
ggplot(mtcars, aes(hp, mpg)) +
geom_point() +
labs(title = "{closest_state}") +
transition_states(cyl,
transition_length = 1,
state_length = 1)
library(ggplot2)
library(gganimate)
txhousing
